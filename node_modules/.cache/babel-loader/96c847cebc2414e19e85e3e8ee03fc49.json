{"ast":null,"code":"var _jsxFileName = \"F:\\\\danit\\\\DTDM\\\\CompilerGo\\\\src\\\\components\\\\Button\\\\Button.js\";\nimport classNames from 'classnames/bind';\nimport styles from \"./Button.module.scss\";\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cx = classNames.bind(styles);\n\nfunction Button(_ref) {\n  let {\n    to,\n    href,\n    primary = false,\n    outline = false,\n    text = false,\n    iconBackgroundHover = false,\n    radiusBorder = false,\n    rounded = false,\n    disabled = false,\n    small = false,\n    large = false,\n    fontSize,\n    children,\n    className,\n    leftIcon,\n    rightIcon,\n    onClick,\n    ...passProps\n  } = _ref;\n  let Comp = 'button';\n  const props = {\n    onClick,\n    ...passProps\n  }; // Remove event listener when btn is disabled\n\n  if (disabled) {\n    Object.keys(props).forEach(key => {\n      if (key.startsWith('on') && typeof props[key] === 'function') {\n        delete props[key];\n      }\n    });\n  }\n\n  if (to) {\n    props.to = to;\n    Comp = Link;\n  } else if (href) {\n    props.href = href;\n    Comp = 'a';\n  }\n\n  const classes = cx('wrapper', {\n    [className]: className,\n    primary,\n    outline,\n    text,\n    iconBackgroundHover,\n    disabled,\n    rounded,\n    small,\n    large\n  });\n  const style = {\n    fontSize: `${fontSize}`\n  };\n  return /*#__PURE__*/_jsxDEV(Comp, {\n    className: classes,\n    ...props,\n    styles: style,\n    children: [leftIcon && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: cx('icon'),\n      children: leftIcon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: cx('title'),\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), rightIcon && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: cx('icon'),\n      children: rightIcon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Button;\nButton.propTypes = {\n  to: PropTypes.string,\n  href: PropTypes.string,\n  primary: PropTypes.bool,\n  outline: PropTypes.bool,\n  text: PropTypes.bool,\n  rounded: PropTypes.bool,\n  disabled: PropTypes.bool,\n  small: PropTypes.bool,\n  large: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  leftIcon: PropTypes.node,\n  onClick: PropTypes.func\n};\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["F:/danit/DTDM/CompilerGo/src/components/Button/Button.js"],"names":["classNames","styles","PropTypes","Link","cx","bind","Button","to","href","primary","outline","text","iconBackgroundHover","radiusBorder","rounded","disabled","small","large","fontSize","children","className","leftIcon","rightIcon","onClick","passProps","Comp","props","Object","keys","forEach","key","startsWith","classes","style","propTypes","string","bool","node","isRequired","func"],"mappings":"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","sourcesContent":["import classNames from 'classnames/bind';\r\nimport styles from './Button.module.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nfunction Button({\r\n    to,\r\n    href,\r\n    primary = false,\r\n    outline = false,\r\n    text = false,\r\n    iconBackgroundHover = false,\r\n    radiusBorder = false,\r\n    rounded = false,\r\n    disabled = false,\r\n    small = false,\r\n    large = false,\r\n    fontSize,\r\n    children,\r\n    className,\r\n    leftIcon,\r\n    rightIcon,\r\n    onClick,\r\n    ...passProps\r\n}) {\r\n    let Comp = 'button';\r\n    const props = {\r\n        onClick,\r\n        ...passProps,\r\n    };\r\n\r\n    // Remove event listener when btn is disabled\r\n    if (disabled) {\r\n        Object.keys(props).forEach((key) => {\r\n            if (key.startsWith('on') && typeof props[key] === 'function') {\r\n                delete props[key];\r\n            }\r\n        });\r\n    }\r\n\r\n    if (to) {\r\n        props.to = to;\r\n        Comp = Link;\r\n    } else if (href) {\r\n        props.href = href;\r\n        Comp = 'a';\r\n    }\r\n\r\n    const classes = cx('wrapper', {\r\n        [className]: className,\r\n        primary,\r\n        outline,\r\n        text,\r\n        iconBackgroundHover,\r\n        disabled,\r\n        rounded,\r\n        small,\r\n        large,\r\n    });\r\n    const style = {\r\n        fontSize: `${fontSize}`,\r\n    };\r\n\r\n    return (\r\n        <Comp className={classes} {...props} styles={style}>\r\n            {leftIcon && <span className={cx('icon')}>{leftIcon}</span>}\r\n            <span className={cx('title')}>{children}</span>\r\n            {rightIcon && <span className={cx('icon')}>{rightIcon}</span>}\r\n        </Comp>\r\n    );\r\n}\r\n\r\nButton.propTypes = {\r\n    to: PropTypes.string,\r\n    href: PropTypes.string,\r\n    primary: PropTypes.bool,\r\n    outline: PropTypes.bool,\r\n    text: PropTypes.bool,\r\n    rounded: PropTypes.bool,\r\n    disabled: PropTypes.bool,\r\n    small: PropTypes.bool,\r\n    large: PropTypes.bool,\r\n    children: PropTypes.node.isRequired,\r\n    className: PropTypes.string,\r\n    leftIcon: PropTypes.node,\r\n\r\n    onClick: PropTypes.func,\r\n};\r\n\r\nexport default Button;\r\n"]},"metadata":{},"sourceType":"module"}